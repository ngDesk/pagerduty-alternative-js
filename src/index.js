/**
 * ngDesk_Operations
 * ngDesk_Operations
 *
 * OpenAPI spec version: 2.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Application', 'model/Attachment', 'model/Reminder', 'model/Server', 'model/Technology', 'model/Ticket', 'model/TicketMessage', 'model/TicketPremadeResponse', 'model/UpdateMultipleStatuses', 'model/User', 'api/DefaultApi'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('./ApiClient'), require('./model/Application'), require('./model/Attachment'), require('./model/Reminder'), require('./model/Server'), require('./model/Technology'), require('./model/Ticket'), require('./model/TicketMessage'), require('./model/TicketPremadeResponse'), require('./model/UpdateMultipleStatuses'), require('./model/User'), require('./api/DefaultApi'));
  }
}(function(ApiClient, Application, Attachment, Reminder, Server, Technology, Ticket, TicketMessage, TicketPremadeResponse, UpdateMultipleStatuses, User, DefaultApi) {
  'use strict';

  /**
   * ngDesk_Operations.<br>
   * The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
   * <p>
   * An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
   * <pre>
   * var NgDeskOperations = require('index'); // See note below*.
   * var xxxSvc = new NgDeskOperations.XxxApi(); // Allocate the API class we're going to use.
   * var yyyModel = new NgDeskOperations.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
   * and put the application logic within the callback function.</em>
   * </p>
   * <p>
   * A non-AMD browser application (discouraged) might do something like this:
   * <pre>
   * var xxxSvc = new NgDeskOperations.XxxApi(); // Allocate the API class we're going to use.
   * var yyy = new NgDeskOperations.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * </p>
   * @module index
   * @version 2.0.0
   */
  var exports = {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient: ApiClient,
    /**
     * The Application model constructor.
     * @property {module:model/Application}
     */
    Application: Application,
    /**
     * The Attachment model constructor.
     * @property {module:model/Attachment}
     */
    Attachment: Attachment,
    /**
     * The Reminder model constructor.
     * @property {module:model/Reminder}
     */
    Reminder: Reminder,
    /**
     * The Server model constructor.
     * @property {module:model/Server}
     */
    Server: Server,
    /**
     * The Technology model constructor.
     * @property {module:model/Technology}
     */
    Technology: Technology,
    /**
     * The Ticket model constructor.
     * @property {module:model/Ticket}
     */
    Ticket: Ticket,
    /**
     * The TicketMessage model constructor.
     * @property {module:model/TicketMessage}
     */
    TicketMessage: TicketMessage,
    /**
     * The TicketPremadeResponse model constructor.
     * @property {module:model/TicketPremadeResponse}
     */
    TicketPremadeResponse: TicketPremadeResponse,
    /**
     * The UpdateMultipleStatuses model constructor.
     * @property {module:model/UpdateMultipleStatuses}
     */
    UpdateMultipleStatuses: UpdateMultipleStatuses,
    /**
     * The User model constructor.
     * @property {module:model/User}
     */
    User: User,
    /**
     * The DefaultApi service constructor.
     * @property {module:api/DefaultApi}
     */
    DefaultApi: DefaultApi
  };

  return exports;
}));
