/**
 * ngDesk_Operations
 * ngDesk_Operations
 *
 * OpenAPI spec version: 2.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Ticket', 'model/TicketMessage', 'model/TicketPremadeResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Ticket'), require('../model/TicketMessage'), require('../model/TicketPremadeResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.NgDeskOperations) {
      root.NgDeskOperations = {};
    }
    root.NgDeskOperations.DefaultApi = factory(root.NgDeskOperations.ApiClient, root.NgDeskOperations.Ticket, root.NgDeskOperations.TicketMessage, root.NgDeskOperations.TicketPremadeResponse);
  }
}(this, function(ApiClient, Ticket, TicketMessage, TicketPremadeResponse) {
  'use strict';

  /**
   * Default service.
   * @module api/DefaultApi
   * @version 2.0.0
   */

  /**
   * Constructs a new DefaultApi. 
   * @alias module:api/DefaultApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the deletePremadeResponse operation.
     * @callback module:api/DefaultApi~deletePremadeResponseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TicketPremadeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove from ticket_premade_response_id
     * @param {Number} ticketPremadeResponseId 
     * @param {String} authenticationToken 
     * @param {module:api/DefaultApi~deletePremadeResponseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TicketPremadeResponse}
     */
    this.deletePremadeResponse = function(ticketPremadeResponseId, authenticationToken, callback) {
      var postBody = null;

      // verify the required parameter 'ticketPremadeResponseId' is set
      if (ticketPremadeResponseId === undefined || ticketPremadeResponseId === null) {
        throw new Error("Missing the required parameter 'ticketPremadeResponseId' when calling deletePremadeResponse");
      }

      // verify the required parameter 'authenticationToken' is set
      if (authenticationToken === undefined || authenticationToken === null) {
        throw new Error("Missing the required parameter 'authenticationToken' when calling deletePremadeResponse");
      }


      var pathParams = {
        'ticket_premade_response_id': ticketPremadeResponseId
      };
      var queryParams = {
        'authentication_token': authenticationToken
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = TicketPremadeResponse;

      return this.apiClient.callApi(
        '/tickets/premade_responses/{ticket_premade_response_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTicketReminder operation.
     * @callback module:api/DefaultApi~deleteTicketReminderCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove from ticket_reminder_id
     * @param {String} ticketId 
     * @param {String} ticketReminderId 
     * @param {String} authenticationToken 
     * @param {module:api/DefaultApi~deleteTicketReminderCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteTicketReminder = function(ticketId, ticketReminderId, authenticationToken, callback) {
      var postBody = null;

      // verify the required parameter 'ticketId' is set
      if (ticketId === undefined || ticketId === null) {
        throw new Error("Missing the required parameter 'ticketId' when calling deleteTicketReminder");
      }

      // verify the required parameter 'ticketReminderId' is set
      if (ticketReminderId === undefined || ticketReminderId === null) {
        throw new Error("Missing the required parameter 'ticketReminderId' when calling deleteTicketReminder");
      }

      // verify the required parameter 'authenticationToken' is set
      if (authenticationToken === undefined || authenticationToken === null) {
        throw new Error("Missing the required parameter 'authenticationToken' when calling deleteTicketReminder");
      }


      var pathParams = {
        'ticket_id': ticketId,
        'ticket_reminder_id': ticketReminderId
      };
      var queryParams = {
        'authentication_token': authenticationToken
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/tickets/{ticket_id}/reminders/{ticket_reminder_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTicketTag operation.
     * @callback module:api/DefaultApi~deleteTicketTagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove from tag_id
     * @param {String} ticketId 
     * @param {String} tagId 
     * @param {String} authenticationToken 
     * @param {module:api/DefaultApi~deleteTicketTagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteTicketTag = function(ticketId, tagId, authenticationToken, callback) {
      var postBody = null;

      // verify the required parameter 'ticketId' is set
      if (ticketId === undefined || ticketId === null) {
        throw new Error("Missing the required parameter 'ticketId' when calling deleteTicketTag");
      }

      // verify the required parameter 'tagId' is set
      if (tagId === undefined || tagId === null) {
        throw new Error("Missing the required parameter 'tagId' when calling deleteTicketTag");
      }

      // verify the required parameter 'authenticationToken' is set
      if (authenticationToken === undefined || authenticationToken === null) {
        throw new Error("Missing the required parameter 'authenticationToken' when calling deleteTicketTag");
      }


      var pathParams = {
        'ticket_id': ticketId,
        'tag_id': tagId
      };
      var queryParams = {
        'authentication_token': authenticationToken
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/tickets/{ticket_id}/tags/{tag_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPremadeResponse operation.
     * @callback module:api/DefaultApi~getPremadeResponseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TicketPremadeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve ticket_premade_response_id
     * @param {String} ticketPremadeResponseId 
     * @param {String} authenticationToken 
     * @param {module:api/DefaultApi~getPremadeResponseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TicketPremadeResponse}
     */
    this.getPremadeResponse = function(ticketPremadeResponseId, authenticationToken, callback) {
      var postBody = null;

      // verify the required parameter 'ticketPremadeResponseId' is set
      if (ticketPremadeResponseId === undefined || ticketPremadeResponseId === null) {
        throw new Error("Missing the required parameter 'ticketPremadeResponseId' when calling getPremadeResponse");
      }

      // verify the required parameter 'authenticationToken' is set
      if (authenticationToken === undefined || authenticationToken === null) {
        throw new Error("Missing the required parameter 'authenticationToken' when calling getPremadeResponse");
      }


      var pathParams = {
        'ticket_premade_response_id': ticketPremadeResponseId
      };
      var queryParams = {
        'authentication_token': authenticationToken
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = TicketPremadeResponse;

      return this.apiClient.callApi(
        '/tickets/premade_responses/{ticket_premade_response_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPremadeResponses operation.
     * @callback module:api/DefaultApi~getPremadeResponsesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TicketPremadeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve premade_responses
     * @param {Number} authenticationToken User authentication uuid
     * @param {Object} opts Optional parameters
     * @param {Number} opts.draw Number of times table has been reloaded
     * @param {String} opts.category Filter by category
     * @param {String} opts.sortBy Column name to order table by
     * @param {Number} opts.start Start query value
     * @param {String} opts.sortByOrder Sort by ascending or descending
     * @param {String} opts.q 
     * @param {Number} opts.length Number of rows query
     * @param {String} opts.statuses Filter by statuses
     * @param {Number} opts.fields Column headers in order
     * @param {module:api/DefaultApi~getPremadeResponsesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TicketPremadeResponse}
     */
    this.getPremadeResponses = function(authenticationToken, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authenticationToken' is set
      if (authenticationToken === undefined || authenticationToken === null) {
        throw new Error("Missing the required parameter 'authenticationToken' when calling getPremadeResponses");
      }


      var pathParams = {
      };
      var queryParams = {
        'draw': opts['draw'],
        'category': opts['category'],
        'authentication_token': authenticationToken,
        'sort_by': opts['sortBy'],
        'start': opts['start'],
        'sort_by_order': opts['sortByOrder'],
        'q': opts['q'],
        'length': opts['length'],
        'statuses': opts['statuses'],
        'fields': opts['fields']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = TicketPremadeResponse;

      return this.apiClient.callApi(
        '/tickets/premade_responses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTicket operation.
     * @callback module:api/DefaultApi~getTicketCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Ticket} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve ticket_id
     * @param {String} ticketId 
     * @param {String} authenticationToken 
     * @param {Object} opts Optional parameters
     * @param {String} opts.category 
     * @param {String} opts.statuses 
     * @param {String} opts.orderedColumn 
     * @param {String} opts.orderedBy 
     * @param {module:api/DefaultApi~getTicketCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Ticket}
     */
    this.getTicket = function(ticketId, authenticationToken, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'ticketId' is set
      if (ticketId === undefined || ticketId === null) {
        throw new Error("Missing the required parameter 'ticketId' when calling getTicket");
      }

      // verify the required parameter 'authenticationToken' is set
      if (authenticationToken === undefined || authenticationToken === null) {
        throw new Error("Missing the required parameter 'authenticationToken' when calling getTicket");
      }


      var pathParams = {
        'ticket_id': ticketId
      };
      var queryParams = {
        'authentication_token': authenticationToken,
        'category': opts['category'],
        'statuses': opts['statuses'],
        'ordered_column': opts['orderedColumn'],
        'ordered_by': opts['orderedBy']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Ticket;

      return this.apiClient.callApi(
        '/tickets/{ticket_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTicketReminder operation.
     * @callback module:api/DefaultApi~getTicketReminderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Ticket} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve ticket_reminder_id
     * @param {String} ticketId 
     * @param {String} ticketReminderId 
     * @param {String} authenticationToken 
     * @param {module:api/DefaultApi~getTicketReminderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Ticket}
     */
    this.getTicketReminder = function(ticketId, ticketReminderId, authenticationToken, callback) {
      var postBody = null;

      // verify the required parameter 'ticketId' is set
      if (ticketId === undefined || ticketId === null) {
        throw new Error("Missing the required parameter 'ticketId' when calling getTicketReminder");
      }

      // verify the required parameter 'ticketReminderId' is set
      if (ticketReminderId === undefined || ticketReminderId === null) {
        throw new Error("Missing the required parameter 'ticketReminderId' when calling getTicketReminder");
      }

      // verify the required parameter 'authenticationToken' is set
      if (authenticationToken === undefined || authenticationToken === null) {
        throw new Error("Missing the required parameter 'authenticationToken' when calling getTicketReminder");
      }


      var pathParams = {
        'ticket_id': ticketId,
        'ticket_reminder_id': ticketReminderId
      };
      var queryParams = {
        'authentication_token': authenticationToken
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Ticket;

      return this.apiClient.callApi(
        '/tickets/{ticket_id}/reminders/{ticket_reminder_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTicketReminders operation.
     * @callback module:api/DefaultApi~getTicketRemindersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Ticket} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve reminders
     * @param {String} ticketId 
     * @param {String} authenticationToken 
     * @param {module:api/DefaultApi~getTicketRemindersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Ticket}
     */
    this.getTicketReminders = function(ticketId, authenticationToken, callback) {
      var postBody = null;

      // verify the required parameter 'ticketId' is set
      if (ticketId === undefined || ticketId === null) {
        throw new Error("Missing the required parameter 'ticketId' when calling getTicketReminders");
      }

      // verify the required parameter 'authenticationToken' is set
      if (authenticationToken === undefined || authenticationToken === null) {
        throw new Error("Missing the required parameter 'authenticationToken' when calling getTicketReminders");
      }


      var pathParams = {
        'ticket_id': ticketId
      };
      var queryParams = {
        'authentication_token': authenticationToken
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Ticket;

      return this.apiClient.callApi(
        '/tickets/{ticket_id}/reminders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTicketTags operation.
     * @callback module:api/DefaultApi~getTicketTagsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Ticket} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve tags
     * @param {String} ticketId 
     * @param {String} authenticationToken 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start Start query value
     * @param {Number} opts.length Number of rows query
     * @param {Number} opts.draw Number of times table has been reloaded
     * @param {String} opts.q Values provided in q are tokenized and search on columns: TICKET_ID,SUBJECT,REQUESTOR_UERNAME, REQUESTOR_EMAIL, TICKET_MESSAGES
     * @param {String} opts.sortBy Column name to order table by
     * @param {String} opts.sortByOrder Sort by ascending or descending
     * @param {String} opts.fields Column headers in order
     * @param {Number} opts.tagId 
     * @param {module:api/DefaultApi~getTicketTagsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Ticket}
     */
    this.getTicketTags = function(ticketId, authenticationToken, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'ticketId' is set
      if (ticketId === undefined || ticketId === null) {
        throw new Error("Missing the required parameter 'ticketId' when calling getTicketTags");
      }

      // verify the required parameter 'authenticationToken' is set
      if (authenticationToken === undefined || authenticationToken === null) {
        throw new Error("Missing the required parameter 'authenticationToken' when calling getTicketTags");
      }


      var pathParams = {
        'ticket_id': ticketId
      };
      var queryParams = {
        'authentication_token': authenticationToken,
        'start': opts['start'],
        'length': opts['length'],
        'draw': opts['draw'],
        'q': opts['q'],
        'sort_by': opts['sortBy'],
        'sort_by_order': opts['sortByOrder'],
        'fields': opts['fields'],
        'tag_id': opts['tagId']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Ticket;

      return this.apiClient.callApi(
        '/tickets/{ticket_id}/tags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTickets operation.
     * @callback module:api/DefaultApi~getTicketsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Ticket>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve tickets
     * @param {Number} authenticationToken User athentication uuid
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start Start query value
     * @param {Number} opts.length Number of rows query
     * @param {Number} opts.draw Number of times table has been reloaded
     * @param {String} opts.q Values provided in q are tokenized and search on columns: TICKET_ID,SUBJECT,REQUESTOR_UERNAME, REQUESTOR_EMAIL, TICKET_MESSAGES
     * @param {String} opts.sortBy Column name to order table by
     * @param {String} opts.sortByOrder Sort by ascending or descending
     * @param {String} opts.fields Column headers in order
     * @param {String} opts.statuses Filter by statuses
     * @param {String} opts.category Filter by category
     * @param {String} opts.accountId 
     * @param {Number} opts.tagId 
     * @param {String} opts.userId 
     * @param {module:api/DefaultApi~getTicketsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Ticket>}
     */
    this.getTickets = function(authenticationToken, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authenticationToken' is set
      if (authenticationToken === undefined || authenticationToken === null) {
        throw new Error("Missing the required parameter 'authenticationToken' when calling getTickets");
      }


      var pathParams = {
      };
      var queryParams = {
        'authentication_token': authenticationToken,
        'start': opts['start'],
        'length': opts['length'],
        'draw': opts['draw'],
        'q': opts['q'],
        'sort_by': opts['sortBy'],
        'sort_by_order': opts['sortByOrder'],
        'fields': opts['fields'],
        'statuses': opts['statuses'],
        'category': opts['category'],
        'account_id': opts['accountId'],
        'tag_id': opts['tagId'],
        'user_id': opts['userId']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Ticket];

      return this.apiClient.callApi(
        '/tickets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postTicketMessages operation.
     * @callback module:api/DefaultApi~postTicketMessagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TicketMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert a ticket_messages
     * @param {Array.<module:model/TicketMessage>} body The request body for the operation
     * @param {String} authenticationToken 
     * @param {module:api/DefaultApi~postTicketMessagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TicketMessage}
     */
    this.postTicketMessages = function(body, authenticationToken, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postTicketMessages");
      }

      // verify the required parameter 'authenticationToken' is set
      if (authenticationToken === undefined || authenticationToken === null) {
        throw new Error("Missing the required parameter 'authenticationToken' when calling postTicketMessages");
      }


      var pathParams = {
      };
      var queryParams = {
        'authentication_token': authenticationToken
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TicketMessage;

      return this.apiClient.callApi(
        '/ticket_messages', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postTicketReminders operation.
     * @callback module:api/DefaultApi~postTicketRemindersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert a reminders
     * @param {String} ticketId 
     * @param {module:model/Ticket} body The request body for the operation
     * @param {String} authenticationToken 
     * @param {module:api/DefaultApi~postTicketRemindersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.postTicketReminders = function(ticketId, body, authenticationToken, callback) {
      var postBody = body;

      // verify the required parameter 'ticketId' is set
      if (ticketId === undefined || ticketId === null) {
        throw new Error("Missing the required parameter 'ticketId' when calling postTicketReminders");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postTicketReminders");
      }

      // verify the required parameter 'authenticationToken' is set
      if (authenticationToken === undefined || authenticationToken === null) {
        throw new Error("Missing the required parameter 'authenticationToken' when calling postTicketReminders");
      }


      var pathParams = {
        'ticket_id': ticketId
      };
      var queryParams = {
        'authentication_token': authenticationToken
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/tickets/{ticket_id}/reminders', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postTickets operation.
     * @callback module:api/DefaultApi~postTicketsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Ticket} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert a tickets
     * @param {Array.<module:model/TicketMessage>} body The request body for the operation
     * @param {Object} opts Optional parameters
     * @param {Number} opts.authenticationToken User athentication uuid
     * @param {module:api/DefaultApi~postTicketsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Ticket}
     */
    this.postTickets = function(body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postTickets");
      }


      var pathParams = {
      };
      var queryParams = {
        'authentication_token': opts['authenticationToken']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Ticket;

      return this.apiClient.callApi(
        '/tickets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putPremadeResponses operation.
     * @callback module:api/DefaultApi~putPremadeResponsesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TicketPremadeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update premade_responses
     * @param {module:model/TicketPremadeResponse} body The request body for the operation
     * @param {String} authenticationToken 
     * @param {module:api/DefaultApi~putPremadeResponsesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TicketPremadeResponse}
     */
    this.putPremadeResponses = function(body, authenticationToken, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putPremadeResponses");
      }

      // verify the required parameter 'authenticationToken' is set
      if (authenticationToken === undefined || authenticationToken === null) {
        throw new Error("Missing the required parameter 'authenticationToken' when calling putPremadeResponses");
      }


      var pathParams = {
      };
      var queryParams = {
        'authentication_token': authenticationToken
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TicketPremadeResponse;

      return this.apiClient.callApi(
        '/tickets/premade_responses', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putTicketMessages operation.
     * @callback module:api/DefaultApi~putTicketMessagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TicketMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update ticket_messages
     * @param {module:model/TicketMessage} body The request body for the operation
     * @param {String} authenticationToken 
     * @param {module:api/DefaultApi~putTicketMessagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TicketMessage}
     */
    this.putTicketMessages = function(body, authenticationToken, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putTicketMessages");
      }

      // verify the required parameter 'authenticationToken' is set
      if (authenticationToken === undefined || authenticationToken === null) {
        throw new Error("Missing the required parameter 'authenticationToken' when calling putTicketMessages");
      }


      var pathParams = {
      };
      var queryParams = {
        'authentication_token': authenticationToken
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TicketMessage;

      return this.apiClient.callApi(
        '/ticket_messages', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putTicketReminders operation.
     * @callback module:api/DefaultApi~putTicketRemindersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update reminders
     * @param {String} ticketId 
     * @param {module:model/Ticket} body The request body for the operation
     * @param {String} authenticationToken 
     * @param {module:api/DefaultApi~putTicketRemindersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.putTicketReminders = function(ticketId, body, authenticationToken, callback) {
      var postBody = body;

      // verify the required parameter 'ticketId' is set
      if (ticketId === undefined || ticketId === null) {
        throw new Error("Missing the required parameter 'ticketId' when calling putTicketReminders");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putTicketReminders");
      }

      // verify the required parameter 'authenticationToken' is set
      if (authenticationToken === undefined || authenticationToken === null) {
        throw new Error("Missing the required parameter 'authenticationToken' when calling putTicketReminders");
      }


      var pathParams = {
        'ticket_id': ticketId
      };
      var queryParams = {
        'authentication_token': authenticationToken
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/tickets/{ticket_id}/reminders', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putTicketReview operation.
     * @callback module:api/DefaultApi~putTicketReviewCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update ticket_review
     * @param {module:model/Ticket} body The request body for the operation
     * @param {String} ticketUuid 
     * @param {String} rating 
     * @param {module:api/DefaultApi~putTicketReviewCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.putTicketReview = function(body, ticketUuid, rating, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putTicketReview");
      }

      // verify the required parameter 'ticketUuid' is set
      if (ticketUuid === undefined || ticketUuid === null) {
        throw new Error("Missing the required parameter 'ticketUuid' when calling putTicketReview");
      }

      // verify the required parameter 'rating' is set
      if (rating === undefined || rating === null) {
        throw new Error("Missing the required parameter 'rating' when calling putTicketReview");
      }


      var pathParams = {
      };
      var queryParams = {
        'ticket_uuid': ticketUuid,
        'rating': rating
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/ticket_review', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putTicketTags operation.
     * @callback module:api/DefaultApi~putTicketTagsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update tags
     * @param {String} ticketId 
     * @param {module:model/Ticket} body The request body for the operation
     * @param {String} authenticationToken 
     * @param {module:api/DefaultApi~putTicketTagsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.putTicketTags = function(ticketId, body, authenticationToken, callback) {
      var postBody = body;

      // verify the required parameter 'ticketId' is set
      if (ticketId === undefined || ticketId === null) {
        throw new Error("Missing the required parameter 'ticketId' when calling putTicketTags");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putTicketTags");
      }

      // verify the required parameter 'authenticationToken' is set
      if (authenticationToken === undefined || authenticationToken === null) {
        throw new Error("Missing the required parameter 'authenticationToken' when calling putTicketTags");
      }


      var pathParams = {
        'ticket_id': ticketId
      };
      var queryParams = {
        'authentication_token': authenticationToken
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/tickets/{ticket_id}/tags', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putTickets operation.
     * @callback module:api/DefaultApi~putTicketsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Ticket>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update tickets
     * @param {Array.<module:model/Ticket>} body The request body for the operation
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.authenticationToken User athentication uuid
     * @param {module:api/DefaultApi~putTicketsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Ticket>}
     */
    this.putTickets = function(body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putTickets");
      }


      var pathParams = {
      };
      var queryParams = {
        'authentication_token': opts['authenticationToken']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Ticket];

      return this.apiClient.callApi(
        '/tickets', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
